/**
	* Nathan Johnson
	* 11/15/18
	* This is the Javascript for my Shodan exploit search api page.  It provides the behavior
	* for the page
	* It should be noted that the Shodan api does not allow normally for the use of the CORS.
	* In order to get use of the Shodan api for use in this way, I had to
	* make use of a proxy, that is designed for just this purpose.
	* for this to run, you need to supply your own shodan api key as the "KEY" constant.
*/
(function() {
	"use strict";
    const URL_BASE="https://exploits.shodan.io/api/search";
    const PROXY_URL = "https://cors-anywhere.herokuapp.com/";
    const KEY="";
    window.addEventListener("load", initialize);

	/*
	* This function initializes the page and sets up the event listeners for buttons on the page
	* @param no parameters
	* @return no returns
	*/
    function initialize() {
        $("submit-btn").addEventListener("click", searchExploits);
        $("clear-btn").addEventListener("click", clearResults);
    }

	/*
	* This Function passes the value that is in the search-bar along to another function and then
	* clears the search-bar so it can be used again
	* @param no parameters
	* @return no returns
	*/
    function searchExploits(){
        let searchTerm = $("search-bar").value;
        $("search-bar").value = "";
        fetchData(searchTerm);
    }

	/*
	* This Function clears the search results from the page
	* @param no paramaters
	* @return no returns
	*/
    function clearResults(){
        while(qsa("article").length > 1){
        qsa("article")[1].remove();
        }
		qs("article").innerText = "";
		qs("article").classList = ".hidden";
    }

	/*
	* This Function performs a GET request on a given api, and then if it comes back successful,
	* returns a (hopefully) well formed json object
	* @param {String} the search Term for the api query
	* @return {JSON} returns a JSON object
	*/
    function fetchData(searchTerm){
        let url = URL_BASE + "?query=" + searchTerm + "&key=" + KEY;
        let urlPlus = PROXY_URL + url;
        fetch(urlPlus)
        .then(checkStatus)
        .then(JSON.parse)
        .then(success)
        .catch(console.log);
    }

	/*
	* This Function takes the api data and displays it on the page by adding new page elements
	* when necessary
	* @param {String} apiData the json object from the api that contains the exploit data
	* @return no returns
	*/
    function success(apiData){
        let showTotal = 100;
        if (apiData.total < 100){
            showTotal = apiData.total;
        }
        for (let i = 0; i < showTotal; i++){
            let resultsSection = document.createElement("section");
            resultsSection.class = "sploits";
            let resultsHeader = document.createElement("h3");
            if (apiData.matches[i].cve !== undefined){
                resultsHeader.innerText = apiData.matches[i].cve + "|";
            } else {
                resultsHeader.innerText = "No CVE";
            }
            resultsHeader.innerText += apiData.matches.title;
            let resultsText = document.createElement("p");
            if (apiData.matches[i].description !== undefined){
                resultsText.innerText = apiData.matches[i].description;
            } else {
                resultsText.innerText = "No Description";
            }
            let resultsCode = document.createElement("p");
            if (apiData.matches[i].code !== undefined){
                resultsCode.innerText = apiData.matches[i].code;
            } else {
                resultsCode.innerText = "No Code";
            }
            let sectionLength;
            if (!qsa("section")){
                sectionLength = 0;
            } else {
                sectionLength = qsa("section").length;
            }
            $("search-results").appendChild(resultsSection);
            qsa("section")[sectionLength].appendChild(resultsHeader);
            qsa("section")[sectionLength].appendChild(resultsText);
            qsa("section")[sectionLength].appendChild(resultsCode);
        }
        qs("div").classList="";
    }

    /*
    * This Function returns a DOM element by its given id
    * @param {string} given element id
    * @returns {object} DOM object defined by given id
    */
    function $(id){
        return document.getElementById(id);
    }

    /*
    * This Function returns a DOM element by its css selector
    * @param {string} given element's css selector
    * @returns {object} DOM element defined by given css selector
    */
    function qs(query){
        return document.querySelector(query);
    }

    /*
    * This Function returns an array of DOM elements by their shared css selector
    * @param {string} given elements' css selector
    * @returns {object[]} array of DOM elements defined by given css selector
    */
    function qsa(query){
        return document.querySelectorAll(query);
    }

    /*
    * This Function takes in an HTTP response status code and checks to see if the HTTP request
    * associated with said status code has been successful.  If the request is successful, it returns
    * that status code, if not, it returns the promise result, along with the error status code and
    * any corresponding text
    * @param {object} response - response to check for success/error
    * @returns {object} - valid result text if response was successful, otherwise rejected
    * Promise result
    */
    function checkStatus(response) {
        if (response.status >= 200 && response.status < 300 || response.status == 0) {
        return response.text();
        } else {
            return Promise.reject(new Error(response.status + ": " + response.statusText));
        }
    }

})();
